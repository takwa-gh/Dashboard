@using System.Text.Json
@using Dashboard.ViewModels
@model Dashboard.ViewModels.DashboardViewModel
@inject IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Dashboard - Home";
}
<!-- CSS spécifique à ce dashboard -->
<link rel="stylesheet" href="~/css/dashboard.css" />

<section class="content">
    <div class="container-fluid">

        @if (HttpContextAccessor.HttpContext.User.IsInRole("Admin") && Model.KpiAlerts?.Any() == true)
        {
            <div class="d-flex justify-content-end pe-4 pt-2">
                <div class="dropdown">
                    <button class="btn bg-transparent border-0 position-relative" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-bell text-danger fs-4"></i>
                        <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                            @Model.KpiAlerts.Count()
                        </span>
                    </button>

                    <ul class="dropdown-menu dropdown-menu-end p-2 shadow-lg" aria-labelledby="dropdownMenuButton" style="min-width: 300px; max-height: 350px; overflow-y: auto;">
                        @foreach (var alert in Model.KpiAlerts)
                        {
                            string bgColor = alert.Severity == AlertLevel.Warning
                            ? "bg-warning-subtle border-warning"
                            : "bg-success-subtle border-success";

                            string textColor = alert.Severity == AlertLevel.Warning
                            ? "text-warning"
                            : "text-success";

                            string iconClass = alert.Severity == AlertLevel.Warning
                            ? "fas fa-exclamation-triangle"
                            : "fas fa-check-circle";

                            <li class="mb-2">
                                <div class="dropdown-item border-start border-4 @bgColor rounded px-2 py-2">
                                    <div class="fw-bold @textColor">
                                        <i class="@iconClass me-1"></i> @alert.Title
                                    </div>
                                    <div class="text-muted small">
                                        @alert.Message
                                    </div>
                                </div>
                            </li>
                        }

                    </ul>
                </div>
            </div>
        }

        @if (Model.HasData)
        {
            <!-- Ligne 1 : jauges -->
            <div class="row">
                <div class="col-lg-3">
                    <div class="card">
                        <div class="card-header">Manpower Allocation</div>
                        <div class="card-body">
                            <canvas id="gauge1" class="gauge-canvas"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="card">
                        <div class="card-header">AWT vs GUM</div>
                        <div class="card-body">
                            <canvas id="gauge2" class="gauge-canvas"></canvas>

                        </div>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="card">
                        <div class="card-header">Line Effectiveness</div>
                        <div class="card-body">
                            <canvas id="gauge3" class="gauge-canvas"></canvas>

                        </div>
                    </div>
                </div>
               
                <div class="col-lg-3">
                    <div class="card">
                        <div class="card-header">GUM vs AWT Line Evaluation</div>
                        <div class="card-body"> 
                            <table class="table table-bordered">
                                <tbody>
                                    <tr>
                                        <th>Working time</th>
                                        <td>@Model.DashboardParams.DashboardInfo.WorkingTime</td>
                                    </tr>
                                    <tr>
                                        <th >Num. of Op.</th>
                                        <td>
                                              Direct: @Model.Stations.Sum(s => s.DirectOperator)

                                              Indirect: @Model.Stations.Sum(s => s.IndirectOperator)
                                        </td>
                                       
                                    </tr>
                                    <tr>
                                        <th>CS (min)</th>
                                        <td>@Model.DashboardParams.DashboardInfo.ConveyorSpeed</td>
                                    </tr>
                                    <tr>
                                        <th>TT (min)</th>
                                        <td>@Model.DashboardParams.DashboardInfo.TactTime</td>
                                    </tr>
                                    <tr>
                                        <th>Actual output</th>
                                        <td>@Model.DashboardParams.DashboardInfo.ActualOutput</td>
                                    </tr>
                                    <tr>
                                        <th>GUM (min)</th>
                                        <td>@Model.TotalGum.ToString("F2")</td>
                                    </tr>
                                    <tr>
                                        <th>AWT (min)</th>
                                        <td>@Model.TotalAwt.ToString("F2")</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Ligne 2: Bar Chart -->
            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">GUM vs AWT Breakdown</div>
                        <div class="card-body">
                            <canvas id="barChart" height="300"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-warning mt-4">
                Aucune donnée disponible pour le moment. Veuillez ajouter des stations ou configurer les paramètres.
            </div>
        }
    </div>
    
</section>
@section Scripts {
    <script src="~/lib/gauge/gauge.min.js"></script>
    <script src="~/lib/chart.js/dist/chart.min.js"></script>

    <script>
        const modelData = (@Html.Raw(JsonSerializer.Serialize(Model, new JsonSerializerOptions
        {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
        })));

        window.dashboardData = modelData;

            window.chartData = {
            labels: modelData.stations.map(s => s.stationName),

            // GUM
            gumAverageData: modelData.stations.map(s => parseFloat(s.averageGumValue ?? 0).toFixed(2)),
            gumMaxData: modelData.stations.map(s => parseFloat(s.maxGumValue ?? 0).toFixed(2)),
            gumMinData: modelData.stations.map(s => parseFloat(s.minGumValue ?? 0).toFixed(2)),

            // AWT
            awtAverageData: modelData.stations.map(s => parseFloat(s.averageAwtValue ?? 0).toFixed(2)),
            awtMaxData: modelData.stations.map(s => parseFloat(s.maxAwtValue ?? 0).toFixed(2)),
            awtMinData: modelData.stations.map(s => parseFloat(s.minAwtValue ?? 0).toFixed(2)),

            // Paramètres globaux
            tactTimeData: Array(modelData.stations.length).fill(modelData.dashboardParams.dashboardInfo.tactTime),
            conveyorSpeedData: Array(modelData.stations.length).fill(modelData.dashboardParams.dashboardInfo.conveyorSpeed),
            cycleTimeData: Array(modelData.stations.length).fill(modelData.dashboardParams.dashboardInfo.cycleTime)
        };
 
       </script>

    <script src="~/js/dashboard.js"></script>

   

}
